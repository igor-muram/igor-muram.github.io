let main_container = document.querySelector(".container");

/* Canvas size */
function CanvasSize() {
    let form_container = document.querySelector(".form-container"),
        canvas = document.querySelector("#canvas"),
        canvas2D = document.querySelector("#canvas2D"),
        empty_block = document.querySelector(".empty-block");

    document.addEventListener("click", function () {
        empty_block.style.width = form_container.offsetWidth + "px";
        canvas.style.width = "calc(100% - " + empty_block.style.width + ")";
        canvas2D.style.width = canvas.style.width;
    });
}

CanvasSize();

/* One active button in section */
function OneActiveButton() {
    let sections = document.querySelectorAll(".one-button-active");

    sections.forEach(function (elem) {
        let buttons = elem.querySelectorAll(".button");

        // Удаление класса push у всех кнопок кроме нажатой
        buttons.forEach(function (el) {
            el.addEventListener("click", function () {
                [].forEach.call(buttons, function (element) {
                    if (element !== el && !el.classList.contains("button-curve"))
                        element.classList.remove("push");
                }, el);
            });
        });
    });
}

OneActiveButton();

/* Push buttons */
function PushButtons() {
    let buttons = document.querySelectorAll(".button");

    // Добавление возможности зажатия каждой включенной кнопке, которая может быть зажата
    buttons.forEach(function (elem) {
        elem.addEventListener("click", function () {
            if (!elem.classList.contains("disabled") && elem.classList.contains("can-push"))
                elem.classList.toggle("push");
        });
    });
}

PushButtons();

/* Mutually exclusive buttons in sections */
function MutuallyExclusiveButtons(first_section, second_section) {
    let first_section_buttons = first_section.querySelectorAll(".button"),
        second_section_buttons = second_section.querySelectorAll(".button");

    // Отжатие всех кнопок во второй секции при нажатии на любую из кнопок первой секции
    first_section_buttons.forEach(function (elem) {
        elem.addEventListener("click", function () {
            second_section_buttons.forEach(function (el) {
                if (!elem.classList.contains("button-curve"))
                    el.classList.remove("push");
            });
        });
    });

    // Отжатие всех кнопок в первой секции при нажатии на любую из кнопок второй секции
    second_section_buttons.forEach(function (elem) {
        elem.addEventListener("click", function () {
            first_section_buttons.forEach(function (el) {
                if (!elem.classList.contains("button-curve"))
                    el.classList.remove("push");
            });
        });
    });
}

/* Connect sections */
function ConnectSections() {
    let form_main = document.querySelector(".form-main"),
        green_section = form_main.querySelector(".form__buttons-green"),
        orange_section = form_main.querySelector(".form__buttons-orange"),
        create_section = document.querySelector(".section__buttons-create"),
        add_section = document.querySelector(".section__buttons-add"),
        selection_section = document.querySelector(".section__buttons-selection"),
        curve_section = document.querySelector(".list-curve");

    MutuallyExclusiveButtons(green_section, orange_section);
    MutuallyExclusiveButtons(green_section, add_section);
    MutuallyExclusiveButtons(green_section, selection_section);

    MutuallyExclusiveButtons(create_section, add_section);
    MutuallyExclusiveButtons(create_section, selection_section);
    MutuallyExclusiveButtons(create_section, orange_section);
    MutuallyExclusiveButtons(create_section, curve_section);

    MutuallyExclusiveButtons(add_section, curve_section);
    MutuallyExclusiveButtons(add_section, orange_section);
    MutuallyExclusiveButtons(add_section, selection_section);
}

if (main_container.classList.contains("preprocessor"))
    ConnectSections();

/* Connect buttons */
function ConnectButtons() {
    let buttons = document.querySelectorAll(".button");

    // Для каждой одинаковой кнопки при нажатии на одну нажимается и другая
    buttons.forEach(function (elem) {
        elem.addEventListener("click", function () {
            [].forEach.call(buttons, function (el) {
                if (elem.dataset.func === el.dataset.func && elem !== el &&
                    elem.dataset.func != undefined && el.dataset.func != undefined &&
                    elem.dataset.func != "" && el.dataset.func != "")
                    if (!elem.classList.contains("disabled") && elem.classList.contains("can-push") &&
                        !el.classList.contains("disabled") && el.classList.contains("can-push")) {
                        el.classList.toggle("push");

                        let section = el.closest(".one-button-active"),
                            section_buttons = section.querySelectorAll(".button");

                        // Удаление выделения с кнопок в секции со второй кнопкой
                        [].forEach.call(section_buttons, function (element) {
                            if (element != el)
                                element.classList.remove("push");
                        }, el);
                    }
            }, elem);
        });
    });
}

ConnectButtons();

/* Panel collapse button */
function PanelCollapse() {
    let collapse_buttons = document.querySelectorAll(".panel__collapse"),
        panels = document.querySelectorAll(".panel"),
        tab_links = document.querySelectorAll(".tab-link"),
        form_container = document.querySelector(".form-container"),
        canvas = document.getElementById("canvas");

    collapse_buttons.forEach(function (elem) {
        elem.addEventListener("click", function () {
            // Поворот стрелки и изменение заголовка для кнопки сворачивания верхней панели
            collapse_buttons.forEach(function (el) {
                el.classList.toggle("active");
                el.title = el.classList.contains("active") ? "Expand panel" : "Collapse panel";
            });

            // Открепление верхних панелей
            panels.forEach(function (el) {
                el.classList.toggle("collapse");
            });

            // Изменение внешнего вида tab-link при откреплении верхних панелей
            tab_links.forEach(function (element) {
                element.classList.toggle("panel-collapsed");
            });

            // Увеличение высоты canvas и form-container на высоту верхней панели при ее откреплении
            canvas.classList.toggle("panel-collapsed");
            form_container.classList.toggle("panel-collapsed");

            // Сворачивание активной  верхней панели 
            if (elem.classList.contains("active")) {
                let panel_show = elem.closest(".panel_show");
                panel_show.classList.remove("panel_show");
            }
        });
    });

    let panel = document.querySelector(".panel");

    // Скрытие открепленной панели при нажатии в любом месте экрана вне этой панели
    document.addEventListener("mousedown", function (e) {
        if (panel.classList.contains("collapse")) {
            let target = e.target,
                active_link = document.querySelector(".active-link"),
                tab_panel = document.querySelector(active_link.getAttribute("href")),
                panel_show = tab_panel.parentElement.querySelector(".panel_show");

            if (panel_show !== null && !target.classList.contains("tab-link")) {
                let panel_clicked = target == panel_show || panel_show.contains(target),
                    panel_is_active = panel_show.classList.contains("panel_show");

                if (!panel_clicked && panel_is_active)
                    panel_show.classList.remove("panel_show");
            }
        }
    });
}

PanelCollapse();

/* Popup window */
let canvas = document.getElementById("canvas2D"),
    container = document.querySelector(".container");

function PopupWindow() {
    let popup_windows = document.querySelectorAll(".popup");

    // Работа кнопок ok, cancel и close в popup-окне
    popup_windows.forEach(function (elem) {
        let popup_close = elem.querySelector(".popup__close"),
            popup_cancel = elem.querySelector(".popup__button-cancel"),
            popup_ok = elem.querySelector(".popup__button-ok"),
            inputs = elem.querySelectorAll(".popup__input");

        popup_close.addEventListener("click", function () {
            ClosePopup();
        });

        popup_cancel.addEventListener("click", function () {
            ClosePopup();
        });

        popup_ok.addEventListener("click", function () {
            ClosePopup();
        });

        // Закрытие окна и очищение input-полей
        function ClosePopup() {
            elem.classList.remove("active");
            container.classList.remove("pointer-none");

            inputs.forEach(function (elem_input) {
                elem_input.value = "";
            });
        }
    });
}

PopupWindow();

// Определение начальной позиции окна по центру экрана
function PopupWindowPosition(drag_id, handle_id) {
    let popup = document.getElementById(drag_id);

    popup.style.top = (document.body.clientHeight - popup.offsetHeight) / 2 + "px";
    popup.style.left = (document.body.clientWidth - popup.offsetWidth) / 2 + "px";

    popup.classList.add("active");
    container.classList.add("pointer-none");

    Drag(drag_id, handle_id);
}

// Вызов popup-окна при нажатии ПКМ на canvas
canvas.addEventListener("contextmenu", function () {
    // PopupWindowPosition("drag-coords", "handle-coords");
    PopupWindowPosition("drag-define-point", "handle-define-point");
    // PopupWindowPosition("drag-define-line", "handle-define-line");
    // PopupWindowPosition("drag-reflection-plane", "handle-reflection-plane");
});

/* Drag popup */
let unpinned_form_count = 0;

// Перемещение окна
function Drag(dragID, handleID) {
    let mousePosition,
        offset = [0, 0],
        handle = document.getElementById(handleID),
        drag = document.getElementById(dragID),
        isDown = false;

    Position(dragID);

    handle.addEventListener("mousedown", function (e) {
        isDown = true;
        offset = [drag.offsetLeft - e.clientX, drag.offsetTop - e.clientY];
    });

    document.addEventListener("mouseup", function () {
        isDown = false;
    });

    document.addEventListener("mousemove", function (e) {
        if (isDown) {
            mousePosition = { x: e.clientX, y: e.clientY };

            drag.style.left = mousePosition.x + offset[0] + "px";
            drag.style.top = mousePosition.y + offset[1] + "px";

            Position(dragID);
        }
    });
}

// Вычисление позиции окна на экране при перемещении
function Position(dragID) {
    let drag = document.getElementById(dragID);

    if (drag.offsetTop < 0) drag.style.top = "0px";

    if (drag.offsetLeft < 0) drag.style.left = "0px";

    if (drag.offsetTop + drag.clientHeight > container.clientHeight) drag.style.top = container.clientHeight - drag.clientHeight + "px";

    if (drag.offsetLeft + drag.clientWidth > container.clientWidth) drag.style.left = container.clientWidth - drag.clientWidth + "px";
}

/* Tabs */
let $tabs = function (target) {
    let elem_tabs = (typeof target === "string" ? document.querySelector(target) : target),
        show_tabs_event,

        // Показ вкладки
        show_tab = function (tab_link) {
            let tab_panel = document.querySelector(tab_link.getAttribute("href"));
            active_link = tab_link.parentElement.querySelector(".active-link");
            panel_show = tab_panel.parentElement.querySelector(".panel_show");

            // Завершение работы, если следующая вкладка равна активной
            if (tab_link === active_link) return;

            // Удаление классов у текущих активных элементов
            if (active_link !== null)
                active_link.classList.remove("active-link");

            if (panel_show !== null)
                panel_show.classList.remove("panel_show");

            // Добавление классов к элементам (в завимости от выбранной вкладки)
            tab_link.classList.add("active-link");
            tab_panel.classList.add("panel_show");

            // Вызов события показа вкладки
            document.dispatchEvent(show_tabs_event);
        },

        // Смена активной вкладки
        switch_tab = function (link_index) {
            let tab_links = elem_tabs.querySelectorAll(".tab-link");

            if (tab_links.length > 0) {
                if (link_index > tab_links.length)
                    link_index = tab_links.length;
                else if (link_index < 1)
                    link_index = 1;

                show_tab(tab_links[link_index - 1]);
            }
        };

    show_tabs_event = new CustomEvent("tab.show", { detail: elem_tabs });

    // Вызов обработчика события нажатия на tab-link для показа вкладки
    elem_tabs.addEventListener("click", function (e) {
        var tab_link = e.target;

        // Завершение выполнения функции, если кликнули не по ссылке
        if (!tab_link.classList.contains("tab-link")) return;

        // Отмена стандартного действия
        e.preventDefault();
        show_tab(tab_link);
    });

    return {
        show_tab: function (target) { show_tab(target); },
        switch_tab: function (index) { switch_tab(index); }
    }
};

$tabs(".container");

/* Menu */
function Menu() {
    let file_button = document.querySelector(".file-button"),
        menu = document.querySelector(".menu");

    // Открытие окна меню при нажатии на кнопку File
    file_button.addEventListener("click", function () {
        file_button.classList.toggle("active");
        menu.classList.toggle("active");
    });

    // Скрытие окна меню при нажатии в любом месте экрана вне меню
    document.addEventListener("mousedown", function (e) {
        let target = e.target;
        let menu_clicked = target == menu || menu.contains(target);
        let file_button_clicked = target == file_button;
        let menu_is_active = menu.classList.contains("active");

        if (!menu_clicked && !file_button_clicked && menu_is_active) {
            file_button.classList.remove("active");
            menu.classList.remove("active");
        }
    });
}

Menu();

/* Checkbox */
let checkboxes = document.querySelectorAll(".checkbox"),
    forms = document.querySelectorAll(".form");

function Checkbox() {
    checkboxes.forEach(function (elem) {
        // Добавление клетки перед текстом
        elem.insertAdjacentHTML("afterbegin", '<span class="check"><svg width="18px" height="18px" viewBox="0 0 18 18"><path d="M1,9 L1,3.5 C1,2 2,1 3.5,1 L14.5,1 C16,1 17,2 17,3.5 L17,14.5 C17,16 16,17 14.5,17 L3.5,17 C2,17 1,16 1,14.5 L1,9 Z"></path><polyline points="0 8 6 13 14 3"></polyline></svg></span>');

        // Активация чекбоксов
        elem.addEventListener("click", function () {
            let check = elem.querySelector(".check"),
                checkbox_container = elem.closest(".checkbox-container"),
                checkbox_quantity = checkbox_container.querySelector(".quantity"),
                checkbox_input = checkbox_container.querySelector(".checkbox__input"),
                base = checkbox_container.querySelector(".base");

            check.classList.toggle("is-checked");

            if (checkbox_input !== null)
                checkbox_input.classList.toggle("active");

            if (checkbox_quantity !== null)
                checkbox_quantity.classList.toggle("active");

            if (base !== null)
                base.classList.toggle("active");

            let form_mouse = document.querySelector(".form-mouse"),
                checkbox_wrapper = form_mouse.querySelector(".form__checkbox-wrapper"),
                active_log_checkboxes = checkbox_wrapper.querySelectorAll(".is-checked"),
                first_checkbox = checkbox_wrapper.querySelector(".first");

            // Выравнивание чекбоксов в форме form-mouse, если включен только один из них
            if (active_log_checkboxes.length == 1) {
                if (active_log_checkboxes[0].closest(".checkbox-container") === first_checkbox)
                    first_checkbox.style.marginRight = "-48px";
                else
                    first_checkbox.style.marginRight = "48px";
            } else {
                first_checkbox.style.marginRight = "0px";
            }
        });
    });

    let bases = document.querySelectorAll(".base");

    // Имитация нажатия на чекбокс при нажатии на основание логарифма
    bases.forEach(function (elem) {
        elem.addEventListener("click", function () {
            let checkbox = elem.closest(".checkbox-container").querySelector(".checkbox");

            let clickEvent = new Event("click");
            checkbox.dispatchEvent(clickEvent);
        });
    });

    // Стрелки для input number
    let quantity = document.querySelectorAll(".quantity"),
        log_inputs = document.querySelectorAll(".log__input");

    log_inputs.forEach(function (elem) {
        elem.insertAdjacentHTML("afterend", '<div class="quantity-button quantity-up"><img src="img/arrow-down.svg" alt=""></div><div class="quantity-button quantity-down"><img src="img/arrow-down.svg" alt=""></div>');
    });

    quantity.forEach(function (elem) {
        let input = elem.querySelector("input"),
            btnUp = elem.querySelector(".quantity-up"),
            btnDown = elem.querySelector(".quantity-down");

        btnUp.addEventListener("click", function () {
            let changeEvent = new Event("change");

            input.value = parseFloat(input.value) + 1;
            input.dispatchEvent(changeEvent);
        });

        btnDown.addEventListener("click", function () {
            let changeEvent = new Event("change");

            input.value = parseFloat(input.value) - 1;
            input.dispatchEvent(changeEvent);
        });
    });
}

Checkbox();

// Запрет ввода текста в числовые поля
function CheckKey(key) {
    return (key >= '0' && key <= '9') || key == '.' || key == 'ArrowLeft' || key == 'ArrowRight' || key == 'Delete' || key == 'Backspace';
}

// Выделение зафиксированной координаты в footer
let fix_checkboxes = document.querySelectorAll(".checkbox-fix");

fix_checkboxes.forEach(function (elem) {
    elem.addEventListener("click", function () {
        let coords_span = document.querySelector("." + elem.dataset.coord.toString());

        coords_span.classList.toggle("fixed");
    });
});

function ShowFloatingList(place, eventname, list, isButton) {
    place.addEventListener(eventname, function (e) {
        let mousePosition = { x: e.clientX, y: e.clientY },
            rect = place.getBoundingClientRect(),
            form_container = document.querySelector(".form-container");

        if (!isButton) {
            // Если нижняя граница меню заходит за границу окна, то выводить окна над позицией нажатия курсора
            if (mousePosition.y - rect.y + list.offsetHeight <= rect.y + place.offsetHeight + 50 - mousePosition.y)
                list.style.top = mousePosition.y + "px";
            else
                list.style.top = mousePosition.y - list.offsetHeight + "px";

            // Если формы находятся справа, то вызывать меню слева от клика мыши и наоборот
            if (form_container.classList.contains("left-side")) {
                list.style.left = mousePosition.x + "px";
                list.style.right = "auto";
            } else {
                list.style.right = place.offsetWidth - (mousePosition.x - rect.x) + "px";
                list.style.left = "auto";
            }
        } else {
            let body = document.querySelector("body");

            // Если нижняя граница меню заходит за границу окна, то выводить окна над позицией нажатия курсора
            if (rect.y + place.offsetHeight + list.offsetHeight <= body.offsetHeight)
                list.style.top = mousePosition.y + "px";
            else
                list.style.top = mousePosition.y - list.offsetHeight + "px";

            // Если формы находятся справа, то вызывать меню слева от клика мыши и наоборот
            if (form_container.classList.contains("left-side"))
                list.style.left = mousePosition.x + "px";
            else
                list.style.left = mousePosition.x - list.offsetWidth + "px";
        }

        list.classList.add("active");
    });

    // Скрытие всплывающего меню при нажатии вне его
    document.addEventListener("mousedown", function (e) {
        let target = e.target;
        let list_clicked = target == list || list.contains(target);
        let list_is_active = list.classList.contains("active");

        if (!list_clicked && list_is_active)
            list.classList.remove("active");
    });
}

/* Form */
function Form() {
    let form_variables = document.querySelector(".form-variables"),
        expander_variables = form_variables.querySelector(".expander .block__heading");

    // Удаление заголовка формы Variables при неактивном expander для удаления лишнего отступа (опционально)
    expander_variables.addEventListener("click", function () {
        form_variables.querySelector(".form__title").classList.toggle("show");
    });

    // Заполнение атрибутов формы data-top и data-left начальными значениями top и left
    forms.forEach(function (elem) {
        let rect = elem.getBoundingClientRect(),
            canvas = document.getElementById("canvas");

        elem.dataset.top = rect.y + "px";
        elem.dataset.left = (canvas.clientWidth - elem.clientWidth) / 2 + "px";
    });

    // Установка начальных значений order для каждой незакрепленной формы
    // function SetOrderForForms() {
    //   let unpinned_forms = [];

    //   forms.forEach(function(elem) {
    //     if (!elem.classList.contains("unpinned"))
    //       unpinned_forms.push(elem);
    //   });

    //   for (let i = 0; i < unpinned_forms.length; i++)
    //     unpinned_forms[i].style.order = i + 1;
    // }

    // SetOrderForForms();

    // Появление формы выше остальных при перемещении
    forms.forEach(function (elem) {
        // MovePinnedForm(elem);

        elem.addEventListener("mousedown", function () {
            ChangeFormZIndex(elem);
        });
    });

    // Перемещение закрепленной формы
    // function MovePinnedForm(form) {
    //   let handle = form.querySelector(".form__handle"),
    //       mousePosition,
    //       isMouseDown = false,
    //       rect = form.getBoundingClientRect(),
    //       prev = form.previousElementSibling,
    //       next = form.nextElementSibling;

    //   handle.addEventListener("mousedown", function () {
    //     isMouseDown = true;
    //   });

    //   document.addEventListener("mouseup", function () {
    //     isMouseDown = false;
    //   });

    //   document.addEventListener("mousemove", function (e) {
    //     if (isMouseDown) {
    //       mousePosition = { x: e.clientX, y: e.clientY };

    //       // Пересечение верхней границы формы
    //       if (mousePosition.y < rect.y) {
    //         console.log("top");
    //       } else { 
    //         // Пересечение нижней границы формы
    //         if (mousePosition.y > rect.y + form.clientHeight)
    //           console.log("bottom");
    //       }
    //     }
    //   });
    // }

    // function swapElements(obj1, obj2) {
    //   obj2.nextSibling === obj1
    //   ? obj1.parentNode.insertBefore(obj2, obj1.nextSibling)
    //   : obj1.parentNode.insertBefore(obj2, obj1); 
    // }

    // Появление выбранной формы выше остальных
    function ChangeFormZIndex(form) {
        form.style.zIndex = "1" + unpinned_form_count;

        [].forEach.call(forms, function (el) {
            if (el !== form)
                el.style.zIndex = "1" + (unpinned_form_count - 1);
        }, form);
    }

    // Доступ к возможности перемещения открепленного окна и счетчик открепленных окон
    function OnClickFormPin(form, drag_id, handle_id) {
        if (!form.classList.contains("unpinned")) {
            unpinned_form_count++;

            form.style.top = form.dataset.top;
            form.style.left = form.dataset.left;

            ChangeFormZIndex(form);

            form.classList.add("unpinned");

            // SetOrderForForms();

            Drag(drag_id, handle_id);
        } else {
            form.classList.remove("unpinned");
            unpinned_form_count--;
            form.style.zIndex = "10";

            form.dataset.top = form.style.top;
            form.dataset.left = form.style.left;

            // SetOrderForForms();
        }
    }

    let form_container = document.querySelector(".form-container"),
        form_control_wrapper = document.querySelector(".form__control-wrapper"),
        form_control = form_control_wrapper.querySelector(".form__control"),
        control_button_collapse = form_control.querySelector(".floating-list__button-collapse"),
        control_button_move = form_control.querySelector(".floating-list__button-move"),
        expand_form_button = document.querySelector(".button-expand_form"),
        form_checkboxes = form_control.querySelectorAll(".checkbox");

    let close_form_buttons = document.querySelectorAll(".form__close");

    // Скрытие выбранной формы
    close_form_buttons.forEach(function (elem) {
        elem.addEventListener("click", function () {
            elem.closest(".form").classList.add("hide");

            // Добавление кнопки "развернуть панель", если на экране не осталось форм
            if (form_container.clientWidth == 0)
                expand_form_button.classList.add("active");

            // Синхронизация форм и чекбоксов
            SynchronizingFormsAndCheckboxes();
        });
    });

    let pin_form_buttons = document.querySelectorAll(".form__pin");

    // Обработка нажатия на Pin
    pin_form_buttons.forEach(function (elem) {
        elem.addEventListener("click", function () {
            elem.classList.toggle("active");

            // Смена title для pin при наведении
            elem.title = elem.classList.contains("active") ? "Pin form" : "Unpin form";

            let current_form = elem.closest(".form");

            OnClickFormPin(current_form, current_form.id.toString(), current_form.querySelector(".form__handle").id.toString());
        });
    });

    // Синхронизация чекбоксов в панели управления формами и наличия форм на экране
    form_checkboxes.forEach(function (elem) {
        elem.addEventListener("click", function () {
            let current_form = document.querySelector("." + elem.dataset.form.toString());

            current_form.classList.toggle("hide");
        });
    });

    SynchronizingFormsAndCheckboxes();

    // Вызов окна управления формами при нажатии ПКМ на form__control-wrapper
    // form_control_wrapper.addEventListener("contextmenu", function (e) {
    //   let mousePosition = { x: e.clientX, y: e.clientY },
    //       rect = form_control_wrapper.getBoundingClientRect();

    //   // Если нижняя граница меню заходит за границу окна, то выводить окна над позицией нажатия курсора
    //   if (mousePosition.y - rect.y + form_control.offsetHeight <= rect.y + form_control_wrapper.offsetHeight + 50 - mousePosition.y)
    //     form_control.style.top = mousePosition.y + "px";
    //   else
    //     form_control.style.top = mousePosition.y - form_control.offsetHeight + "px";

    //   // Если формы находятся справа, то вызывать меню слева от клика мыши и наоборот
    //   if (form_container.classList.contains("left-side")) {
    //     form_control.style.left = form_control_wrapper.offsetWidth - (form_control_wrapper.offsetWidth - mousePosition.x)  + "px";
    //     form_control.style.right = "auto";
    //   } else {
    //     form_control.style.right = form_control_wrapper.offsetWidth - (mousePosition.x - rect.x) + "px";
    //     form_control.style.left = "auto";
    //   }

    //   form_control.classList.add("active");
    // });

    // Активация всплывающих меню для кнопок move, copy и create curve 

    if (main_container.classList.contains("preprocessor")) {
        let button_move = document.querySelector(".button-move"),
            list_move = form_container.querySelector(".list-move"),
            button_copy = document.querySelector(".button-copy"),
            list_copy = form_container.querySelector(".list-copy"),
            button_curve = document.querySelector(".button-curve"),
            list_curve = form_container.querySelector(".list-curve");

        ShowFloatingList(button_move, "click", list_move, true);
        ShowFloatingList(button_copy, "click", list_copy, true);
        ShowFloatingList(button_curve, "click", list_curve, true);
    }

    // Активация всплывающего меню управления формами
    ShowFloatingList(form_control_wrapper, "contextmenu", form_control, false);

    // Скрытие окна управления формами, сворачивание панели с формами и появление кнопки "развернуть панель" при нажатии на "свернуть панель"
    control_button_collapse.addEventListener("click", function () {
        form_control.classList.remove("active");
        form_container.classList.add("hide");
        expand_form_button.classList.add("active");
    });

    // Перемещение панели с формами и кнопки "развернуть панель" на противоположную сторону
    control_button_move.addEventListener("click", function () {
        form_control.classList.remove("active");
        form_container.classList.toggle("left-side");
        expand_form_button.classList.toggle("left-side");
    });

    // Скрытие кнопки "развернуть панель" при нажатии на нее и открытие главной формы 
    expand_form_button.addEventListener("click", function () {
        expand_form_button.classList.remove("active");

        let main_form = document.querySelector(".form-main");

        main_form.classList.remove("hide");
        form_container.classList.remove("hide");

        // Синхронизация форм и чекбоксов
        SynchronizingFormsAndCheckboxes();
    });

    // Синхронизация чекбоксов и форм
    function SynchronizingFormsAndCheckboxes() {
        for (let i = 0; i < forms.length; i++) {
            if (!forms[i].classList.contains("hide"))
                form_checkboxes[i].querySelector(".check").classList.add("is-checked");
            else
                form_checkboxes[i].querySelector(".check").classList.remove("is-checked");
        }
    }
}

Form();

/* Expander */
function Expander() {
    let expanders = document.querySelectorAll(".expander");

    expanders.forEach(function (elem) {
        elem.addEventListener("click", function (e) {
            let target = e.target,
                block_headings = elem.querySelectorAll(".block__heading"),
                block_collapses = elem.querySelectorAll('.block__collapse');

            if (!target.classList.contains("block__heading")) return;

            if (target.classList.contains("active")) {
                for (let i = 0; i < block_headings.length; i++)
                    block_headings[i].classList.remove("active");

                for (let i = 0; i < block_collapses.length; i++)
                    block_collapses[i].classList.remove("active");
            } else {
                for (let i = 0; i < block_headings.length; i++)
                    block_headings[i].classList.remove("active");

                for (let i = 0; i < block_collapses.length; i++)
                    block_collapses[i].classList.remove("active");

                target.classList.add("active");

                let block_collapse = target.nextElementSibling;
                block_collapse.classList.add("active");
            }
        });
    });
}

Expander();

/* Search element in array */
function contains(arr, elem) {
    return arr.find((i) => i === elem) != -1;
}

/* Select */
function Select() {
    let selects = document.querySelectorAll(".select-box");

    selects.forEach(function (elem) {
        elem.addEventListener("click", function () {
            let options_container = elem.querySelector(".options-container"),
                options = options_container.querySelectorAll(".option"),
                selected = elem.querySelector(".selected");

            // Открытие select
            options_container.classList.toggle("active");

            // Выбор значения из списка
            options.forEach(function (el) {
                el.addEventListener("click", function () {
                    selected.innerHTML = el.innerHTML;

                    // Смена названий осей в footer и form-mouse
                    if (elem.classList.contains("select-coords")) {
                        let footer = document.querySelector(".footer"),
                            form_mouse = document.querySelector(".form-mouse"),
                            empty = form_mouse.querySelector(".empty");

                        let first_axis = footer.querySelector(".coords__axis-first"),
                            second_axis = footer.querySelector(".coords__axis-second"),
                            third_axis = footer.querySelector(".coords__axis-third");

                        let first_form_axis = form_mouse.querySelector(".form-coords__axis-first"),
                            second_form_axis = form_mouse.querySelector(".form-coords__axis-second"),
                            third_form_axis = form_mouse.querySelector(".form-coords__axis-third");

                        if (el.dataset.name == "GC") {
                            first_axis.textContent = "X: ";
                            second_axis.textContent = "Y: ";
                            third_axis.textContent = "Z: ";

                            first_form_axis.textContent = "X: ";
                            second_form_axis.textContent = "Y: ";
                            third_form_axis.textContent = "Z: ";

                            empty.style.width = "25px";
                        } else if (el.dataset.name == "LC") {
                            first_axis.textContent = "XI: ";
                            second_axis.textContent = "YI: ";
                            third_axis.textContent = "ZI: ";

                            first_form_axis.textContent = "XI: ";
                            second_form_axis.textContent = "YI: ";
                            third_form_axis.textContent = "ZI: ";

                            empty.style.width = "30px";
                        } else if (el.dataset.name == "LP") {
                            first_axis.textContent = "R: ";
                            second_axis.textContent = "φ: ";
                            third_axis.textContent = "Z: ";

                            first_form_axis.textContent = "R: ";
                            second_form_axis.textContent = "φ: ";
                            third_form_axis.textContent = "Z: ";

                            empty.style.width = "25px";
                        }
                    }
                });
            });

            // Скрытие списка при нажатии вне select
            document.addEventListener("mousedown", function (e) {
                let target = e.target;
                let select_clicked = target == elem || elem.contains(target);
                let select_is_active = options_container.classList.contains("active");

                if (!select_clicked && select_is_active)
                    options_container.classList.remove("active");
            });
        });
    });
}

Select();